[user]
	name = AJ Hawks
	email = aj.hawks@mapmyfitness.com
[http]
	sslverify = false
[alias]
	lg = log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --
    #lg = log -p
       # Merge a branch into origin/staging and push it to origin/staging
    # Ex: git sb PRM-100
    devint = !sh -c 'echo "Pushing $1 to devint..." && git fetch && git checkout devint && git reset --hard origin/devint && git pull origin $1 && git push origin devint && echo "Pushed $1 to devint." && git checkout $1' -
    stage-branch = !sh -c 'echo "Staging $1..." && git fetch && git checkout staging && git reset --hard origin/staging && git pull origin $1 && git push origin staging && echo "Staged $1."' -
    sb = !sh -c 'git stage-branch $1' -

    # Do a clean checkout of origin/master from remote (all modifications will be deleted)
    # Ex: git master 
    master = !sh -c 'echo "Updating master..." && git fetch && git checkout -f master && git reset --hard origin/master' -

    # Do a clean branch of origin/master
    # Ex: git bb PRM-100
    branch-master= !sh -c 'echo "Branching $1 from master..." && git master && git checkout -b $1 && echo "Branched master as $1"' -
    bb = !sh -c 'git branch-master $1' -
    master = !sh -c 'echo "Updating master..." && git fetch && git checkout -f master && git reset --hard origin/master' -
    branch-master = !sh -c 'echo "Branching $1 from master..." && git master && git checkout -b $1 && echo "Branched master as $1"' -

    # Push the current branch to origin HEAD (push head)
    ph = !sh -c 'git push origin HEAD'

    # Rebase a branch with master
    # Ex: git rb PRM-100
    rebase-master = !sh -c 'echo "Rebasing $1 with master..." && git master && git checkout $1 && git rebase origin/master && echo "Rebased $1 with master."' -
    rb = !sh -c 'git rebase-master $1' -

    # Prune all remote branches
    prune-all = !git remote | xargs -n 1 git remote prune

    # Shortcuts
    ca = commit -a
    ci = commit
    br = branch
    co = checkout
    df = diff
    logo = log --graph --decorate --stat
    who = shortlog -s --

    # Get a list of changed files
    changes = diff --name-status -r

    # Get statistics for file changes
    diffstat = diff --stat -r

    # from http://code.joejag.com/2013/everyday-git-aliases
    standup = "!git log --since yesterday --author `git config user.email` --pretty=short"
    purr = pull --rebase
    st = status -sb
    ready = rebase -i @{u}

    # from http://blog.apiaxle.com/post/handy-git-tips-to-stop-you-getting-fired/
    assume = update-index --assume-unchanged
    unassume = update-index --no-assume-unchanged
    assumed = "!git ls-files -v | grep ^h | cut -c 3-"
    snapshot = !git stash save "snapsho: $(date)" && git stash apply "stash@{0}"

    

[help]
	autocorrect = 1

[color]
	ui = true

#[merge]
#    tool = vimdiff
#[diff]
#    tool = opendiff

[diff]
        tool = diffmerge
        algorithm = patience
        
[difftool "diffmerge"]
        cmd = diffmerge \"$LOCAL\" \"$REMOTE\"
[merge]
        tool = diffmerge
[mergetool "diffmerge"]
        cmd = "diffmerge --merge --result=\"$MERGED\" \"$LOCAL\" \"$(if test -f \"$BASE\"; then echo \"$BASE\"; else echo \"$LOCAL\"; fi)\" \"$REMOTE\""
            trustExitCode = true
[gui]
	recentrepo = /Users/andrewhawks/Documents/android
